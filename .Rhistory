unadjusted_pred <- predict(fitted_garch, n.ahead = shock_length_vec[1])
}
else{
## BEGIN fit GARCH to target series
fitted_garch <- garchx::garchx(Y_series_list[[1]][1:(integer_shock_time_vec[1])]
, order = garch_order
, xreg = covariates_series_list[[1]][1:(integer_shock_time_vec[1]),covariate_indices]
, backcast.values = NULL
, control = list(eval.max = 100000
, iter.max = 1500000
, rel.tol = 1e-8))
cat('\n===============================================================\n')
print('Outputting the fitted GARCH for the time series under study.')
print(fitted_garch)
cat('\n===============================================================\n')
#Note: for forecasting, we use last-observed X value
X_to_use_in_forecast <- covariates_series_list[[1]][integer_shock_time_vec[1],covariate_indices]
X_replicated_for_forecast_length <- matrix(rep(X_to_use_in_forecast, k)
, nrow = shock_length_vec[1]
, byrow = TRUE)
forecast_period <- (integer_shock_time_vec[1]):(integer_shock_time_vec[1]+shock_length_vec[1])
mat_X_for_forecast <- cbind(Y_series_list[[1]][forecast_period]
, X_replicated_for_forecast_length)
unadjusted_pred <- predict(fitted_garch
, n.ahead = shock_length_vec[1]
, newxreg = mat_X_for_forecast[,-1])
}
print('Now we get the adjusted predictions.')
adjusted_pred <- unadjusted_pred + rep(omega_star_hat, k)
arithmetic_mean_based_pred <- rep(mean(omega_star_hat_vec), k) + unadjusted_pred
if (is.null(ground_truth_vec) == TRUE){
QL_loss_unadjusted_pred <- NA
QL_loss_adjusted_pred <- NA
}
else {
QL_loss_unadjusted_pred <- sum(QL_loss_function(ground_truth_vec, unadjusted_pred))
QL_loss_adjusted_pred <- sum(QL_loss_function(ground_truth_vec, adjusted_pred))
}
list_of_linear_combinations <- list(w_hat)
list_of_forecasts <- list(unadjusted_pred, adjusted_pred)
names(list_of_forecasts) <- c('unadjusted_pred', 'adjusted_pred')
output_list <- list(list_of_linear_combinations
, list_of_forecasts)
names(output_list) <- c('linear_combinations', 'predictions')
## tk OUTPUT
cat('--------------------------------------------------------------\n',
'-------------------SynthVolForecast Results-------------------','\n',
'--------------------------------------------------------------\n',
'Donors:', n, '\n',  '\n',
'Shock times:', shock_time_vec, '\n', '\n',
'Lengths of shock times:', shock_length_vec, '\n', '\n',
'Optimization Success:', dbw_output[[2]], '\n', '\n',
'Convex combination:',w_hat,'\n', '\n',
'Shock estimates:', omega_star_hat_vec, '\n', '\n',
'Aggregate estimated shock effect:', omega_star_hat, '\n', '\n',
'Unadjusted Forecast:', unadjusted_pred,'\n', '\n',
'Adjusted Forecast:', adjusted_pred,'\n', '\n',
'Arithmetic-Mean-Based Forecast:',arithmetic_mean_based_pred,'\n','\n',
'Ground Truth (estimated by realized volatility):', ground_truth_vec,'\n', '\n',
'QL Loss of unadjusted:', QL_loss_unadjusted_pred,'\n', '\n',
'QL Loss of adjusted:', QL_loss_adjusted_pred,'\n', '\n'
)
## PLOTS
if (plots == TRUE){
cat('\n User has opted to produce plots.','\n')
plot_maker_garch(fitted(fitted_garch)
,shock_time_labels
,integer_shock_time_vec
,shock_length_vec
,unadjusted_pred
,w_hat
,omega_star_hat
,omega_star_hat_vec
,adjusted_pred
,arithmetic_mean_based_pred
,ground_truth_vec)
}
return(output_list)
} ### END SynthVolForecast
### START SynthPrediction
SynthPrediction <- function(Y_series_list
,covariates_series_list
,shock_time_vec
,shock_length_vec
,k = 1
,dbw_scale = TRUE
,dbw_center = TRUE
,dbw_indices = NULL
,princ_comp_input = min(length(shock_time_vec), ncol(covariates_series_list[[1]]))
,covariate_indices = NULL
,geometric_sets = NULL #tk
,days_before_shocktime_vec = NULL #tk I may want to remove this
,arima_order = NULL
,user_ic_choice = c('aicc','aic','bic')[1]
,plots = TRUE
,display_ground_truth_choice = FALSE
){
### BEGIN Doc string
#tk
### END Doc string
### BEGIN Populate defaults
n <- length(Y_series_list) - 1
if (is.null(arima_order) == TRUE) {
arima_order <- c(1,1,1)
}
print('The indices used for distance-based-weight are ')
print(dbw_indices)
if (is.null(dbw_indices) == TRUE) {
dbw_indices <- 1:ncol(covariates_series_list[[1]]) #tk
}
### END Populate defaults
## BEGIN Check that inputs are all comformable/acceptable
n <- length(Y_series_list) - 1 #tk
## END Check that inputs are all comformable/acceptable
integer_shock_time_vec <- c() #mk
integer_shock_time_vec_for_convex_hull_based_optimization <- c() #mk
## BEGIN Check whether shock_time_vec is int/date
for (i in 1:(n+1)){
if (is.character(shock_time_vec[i]) == TRUE){
integer_shock_time_vec[i] <- which(index(Y[[i]]) == shock_time_vec[i]) #mk
integer_shock_time_vec_for_convex_hull_based_optimization[i] <- which(index(covariates_series_list[[i]]) == shock_time_vec[i]) #mk
}
else{
integer_shock_time_vec[i] <- shock_time_vec[i]
integer_shock_time_vec_for_convex_hull_based_optimization[i] <- shock_time_vec[i]
}
}
## END Check whether shock_time_vec is int/date
## BEGIN estimate fixed effects in donors
omega_star_hat_vec <- c()
order_of_arima <- list()
for (i in 2:(n+1)){
# Make indicator variable w/ a 1 at only T*+1, T*+2,...,T*+shock_length_vec[i]
vec_of_zeros <- rep(0, integer_shock_time_vec[i])
vec_of_ones <- rep(1, shock_length_vec[i])
post_shock_indicator <- c(vec_of_zeros, vec_of_ones)
last_shock_point <- integer_shock_time_vec[i] + shock_length_vec[i]
#subset X_i
if (is.null(covariate_indices) == TRUE) {
X_i_penultimate <- cbind(Y_series_list[[i]][1:last_shock_point]
, post_shock_indicator)
X_i_final <- X_i_penultimate[,2]
}
else {
X_i_subset <- covariates_series_list[[i]][1:last_shock_point,covariate_indices]
X_i_with_indicator <- cbind(X_i_subset, post_shock_indicator)
X_i_final <- X_i_with_indicator
}
print('Now fitting the donor ARIMA models')
arima <- forecast::auto.arima(Y_series_list[[i]][1:last_shock_point]
,xreg=X_i_final
,ic = user_ic_choice)
print(arima)
order_of_arima[[i]] <- arima$arma #tk
coef_test <- lmtest::coeftest(arima)
extracted_fixed_effect <- coef_test[nrow(coef_test),1]
omega_star_hat_vec <- c(omega_star_hat_vec, extracted_fixed_effect)
} ## END loop for computing fixed effects
## END estimate fixed effects in donors
## BEGIN compute linear combination of fixed effects
dbw_output <- dbw(covariates_series_list, #tk
dbw_indices,
integer_shock_time_vec,
scale = TRUE,
center = TRUE,
sum_to_1 = TRUE, #tk
bounded_below_by = 0, #tk
bounded_above_by = 1, #tk
# normchoice = normchoice, #tk
# penalty_normchoice = penalty_normchoice,
# penalty_lambda = penalty_lambda
Y = Y_series_list,
inputted_transformation = id
)
w_hat <- dbw_output[[1]]
omega_star_hat <- as.numeric(w_hat %*% omega_star_hat_vec)
## END compute linear combination of fixed effects
## BEGIN fit GARCH to target series
if (is.null(covariate_indices) == TRUE){
arima <- forecast::auto.arima(Y_series_list[[1]][1:(integer_shock_time_vec[1])]
,xreg = NULL
,ic = user_ic_choice)
unadjusted_pred <- predict(arima, n.ahead = shock_length_vec[1])
}
else{
## BEGIN fit GARCH to target series
X_lagged <- lag.xts(covariates_series_list[[1]][1:integer_shock_time_vec[1],covariate_indices])
arima <- forecast::auto.arima(Y_series_list[[1]][1:integer_shock_time_vec[1]]
,xreg = X_lagged
,ic = user_ic_choice)
print(arima)
#Note: for forecasting, we use last-observed X value
X_to_use_in_forecast <- covariates_series_list[[1]][integer_shock_time_vec[1],covariate_indices]
X_replicated_for_forecast_length <- matrix(rep(X_to_use_in_forecast, k)
, nrow = shock_length_vec[1]
, byrow = TRUE)
forecast_period <- (integer_shock_time_vec[1]+1):(integer_shock_time_vec[1]+shock_length_vec[1])
mat_X_for_forecast <- cbind(Y_series_list[[1]][forecast_period]
, X_replicated_for_forecast_length)
unadjusted_pred <- predict(arima
, n.ahead = shock_length_vec[1]
, newxreg = mat_X_for_forecast[,-1])
}
##We take care of housekeeping
#tk
order_of_arima[[1]] <- arima$arma
print('now we print dataframe with orders...')
order_matrix <- matrix(unlist(order_of_arima), byrow = TRUE, nrow = length(order_of_arima))
print(order_matrix)
if( length(unique(order_matrix[,2])) > 1 ) {
message <- paste('NOT all series are I(', order_matrix[,2], ')')
warning(message)
}
##
adjusted_pred <- unadjusted_pred$pred + omega_star_hat
list_of_linear_combinations <- list(w_hat)
list_of_forecasts <- list(unadjusted_pred, adjusted_pred)
names(list_of_forecasts) <- c('unadjusted_pred', 'adjusted_pred')
output_list <- list(list_of_linear_combinations
, list_of_forecasts)
names(output_list) <- c('linear_combinations', 'predictions')
## tk OUTPUT
cat('SynthPrediction Details','\n',
'-------------------------------------------------------------\n',
'Donors:', n, '\n',
'Shock times:', shock_time_vec, '\n',
'Lengths of shock times:', shock_length_vec, '\n',
'Optimization Success:', dbw_output[[2]], '\n', '\n',
'Convex combination',w_hat,'\n',
'Shock estimates provided by donors:', omega_star_hat_vec, '\n',
'Aggregate estimated shock effect:', omega_star_hat, '\n',
'Actual change in stock price at T* + 1:', Y_series_list[[1]][integer_shock_time_vec[1]+1],'\n',
'Unadjusted forecasted change in stock price at T*+1:', unadjusted_pred$pred,'\n',
'MSE unadjusted:', (as.numeric(Y_series_list[[1]][integer_shock_time_vec[1]+1])-unadjusted_pred$pred)**2,'\n',
'Adjusted forecasted change in stock price at T*+1:', adjusted_pred,'\n',
'MSE adjusted:', (as.numeric(Y_series_list[[1]][integer_shock_time_vec[1]+1])-adjusted_pred)**2,'\n'
)
## PLOTS
if (plots == TRUE){
cat('User has opted to produce plots.','\n')
plot_maker_synthprediction(Y_series_list
,shock_time_vec
,integer_shock_time_vec
,shock_length_vec
,unadjusted_pred$pred
,w_hat
,omega_star_hat
,omega_star_hat_vec
,adjusted_pred
,display_ground_truth = display_ground_truth_choice
)
}
return(output_list)
} ### END SynthPrediction
#Now run the algorithm
temp <- SynthVolForecast(Y
,X
,shock_time_vec = unlist(shock_dates)
,rep(k, n+1)
,dbw_scale = TRUE
,dbw_center = TRUE
,dbw_indices = NULL
#,covariate_indices = length(X)
,garch_order = c(1,1,0)
,plots = TRUE
,shock_time_labels = names(shock_dates)
,ground_truth_vec = ground_truth
,Y_lookback_indices = list(seq(1,30,1))
,X_lookback_indices = rep(list(c(1)),ncol(X[[1]]))
)
png(png_save_name,width = 800, height = 600)
#Now run the algorithm
temp <- SynthVolForecast(Y
,X
,shock_time_vec = unlist(shock_dates)
,rep(k, n+1)
,dbw_scale = TRUE
,dbw_center = TRUE
,dbw_indices = NULL
#,covariate_indices = length(X)
,garch_order = c(1,1,0)
,plots = TRUE
,shock_time_labels = names(shock_dates)
,ground_truth_vec = ground_truth
,Y_lookback_indices = list(seq(1,30,1))
,X_lookback_indices = rep(list(c(1)),ncol(X[[1]]))
)
dev.off()
options(digits = 7, scipen = 7)
sysname <- Sys.info()["sysname"]
if(sysname == "Darwin") {
setwd("~/Desktop/PhD/synthetic_vol_forecasting/") # example on mac machine
} else if(sysname == "Linux") {
setwd('~/Desktop/synthetic_vol_forecasting/synthVolForecast.R') # example on linux machine
}
### BEGIN 2016 election example
packs <- c('quantmod'
,'bizdays'
,'lubridate'
,'rlist'
,'Rsolnp'
,'garchx'
,'lmtest'
,'RColorBrewer'
,'forecast'
)
suppressPackageStartupMessages(lapply(packs, require, character.only = TRUE))
## BEGIN USER DATA INPUTS##
ground_truth <- c(0.000712, 0.000976)
ground_truth <- c(0.000712)
#ground_truth <- c(0.000712, 0.000976, .0006)
k <- length(ground_truth)
TSUS <- 'IYG'
log_ret_covariates <- c(#"GBP=X",
# "6B=F",
"CL=F"
,"^VIX"
,"^IRX"
,"^FVX"
,"^TNX"
,"^TYX"
#,"DX-Y.NYB"
)
level_covariates <- c('^VIX'
#,"GBP=X"
#,'^IRX'
)
volume_covariates <- c()
FRED_covariates <- c('AAA', 'BAA')
shock_dates <- list('2016 Election' = "2016-11-08"
#,'Brexit' = "2016-06-22"
# ,'2014 Midterm' = "2014-11-04"
,'2012 Election' = "2012-11-06"
# , '2010 Midterm' ="2010-11-02"
,'2008 Election' = "2008-11-04"
# , '2006 Midterm' ="2006-11-07"
,'2004 Election' = "2004-11-02"
#,'2002 Midterm' =  "2002-11-05"
#,'2000 Election' = "2000-11-07"
)
shock_dates <- c(shock_dates[1], list.reverse(shock_dates[2:length(shock_dates)]))
## END USER DATA INPUTS##
nyse <- timeDate::holidayNYSE(2000:year(Sys.Date())+1)
create.calendar(name='NYSE', holidays=nyse, weekdays=c('saturday', 'sunday'))
shock_dates_as_dates <- as.Date(as.Date(unlist(shock_dates)))
start_dates <- offset(shock_dates_as_dates, round(-3.5*252), "NYSE")
k_periods_after_shock <- offset(shock_dates_as_dates, k, "NYSE")
market_data_list <- vector("list", length(shock_dates))
names(market_data_list) <- names(shock_dates)
# Now we loop through shock dates
for (i in 1:length(shock_dates)){
print(shock_dates_as_dates[i])
data_TSUS <- lapply(TSUS, function(sym) {
dailyReturn(na.omit(getSymbols(sym
,from=start_dates[i]
,to=k_periods_after_shock[i]+20 #tk +10
,auto.assign=FALSE))[,6]
,type='log')})
data_log_ret_covariates <- lapply(log_ret_covariates, function(sym) {
dailyReturn(na.omit(getSymbols(sym
,from=start_dates[i]
,to=k_periods_after_shock[i]+20 #tk +10
,auto.assign=FALSE))[,6]
,type='log')})
data_level_covariates <- lapply(level_covariates, function(sym) {
na.omit(getSymbols(sym
,from=start_dates[i]
,to=k_periods_after_shock[i]+20 #tk +10
,auto.assign=FALSE))[,6]})
data_volume_covariates <- lapply(volume_covariates, function(sym) {
dailyReturn(na.omit(getSymbols(sym
,from=start_dates[i]
,to=k_periods_after_shock[i]+20 #tk +10
,auto.assign=FALSE))[,6])})
data_absolute_return_covariates <- lapply(data_log_ret_covariates, abs)
data_absolute_return_covariates <- c()
if (length(FRED_covariates) > 0){
#Get FRED data (requires subtracting one series from another)
data_FRED_covariates <- lapply(FRED_covariates, function(sym) {
na.omit(getSymbols(sym
,src = 'FRED'
,from=start_dates[i]
,to=k_periods_after_shock[i]+20 #tk +10
,auto.assign=FALSE))[,1]})
# Now we are going manually and carefully add the spread between BAA and AAA credit
diff_log_FRED_spread <- diff(log(data_FRED_covariates[[2]] - data_FRED_covariates[[1]]))
month_before_shock <- month(shock_dates_as_dates[i]) - 1
year_of_shock <- year(shock_dates_as_dates[i]) #This is not necessarily robust to a shock in January
first_of_month_before_shock <- paste(year_of_shock
,'-'
,month_before_shock
,'-'
,'01'
,sep = '')
first_of_month_before_shock <- as.Date(first_of_month_before_shock)
diff_log_FRED_spread_latest_before_shock <- diff_log_FRED_spread[first_of_month_before_shock]
# date <- shock_dates_as_dates[i]
# data <- as.numeric(diff_log_FRED_spread_latest_before_shock)
# row_to_add <- xts(data, order.by = date)
#Drop NA
diff_log_FRED_spread_latest_before_shock <- na.omit(diff_log_FRED_spread_latest_before_shock)
} #end lapply for FRED covariates
to_add <- c(data_TSUS
, data_log_ret_covariates
, data_level_covariates
, data_volume_covariates
, data_absolute_return_covariates
)
merged_data <- do.call(merge, to_add)
#We add column names to the data so we can analyze it more easily when we print it
if (length(log_ret_covariates) > 0)
{log_ret_covariates_colname <- paste(log_ret_covariates, "_log_ret", sep="")}
else
{log_ret_covariates_colname <- c()}
if (length(level_covariates) > 0)
{level_covariates_colname <- paste(level_covariates, "_raw", sep="")}
else
{level_covariates_colname <- c()}
if (length(volume_covariates) > 0)
{volume_covariates_colname <- paste(volume_covariates, "_volume", sep="")}
else
{volume_covariates_colname <- c()}
if (length(data_absolute_return_covariates) > 0)
{abs_log_ret_covariates_colname <- paste(log_ret_covariates, "_abs_log_ret", sep="")}
else
{abs_log_ret_covariates_colname <- c()}
colnames(merged_data) <- c(TSUS
, log_ret_covariates_colname
, level_covariates_colname
, volume_covariates_colname
, abs_log_ret_covariates_colname
)
if (length(FRED_covariates) > 0){
dates <- index(merged_data)
times <- length(dates)
data <- rep(as.numeric(diff_log_FRED_spread_latest_before_shock), times)
Debt_Risk_Spread <- xts(data, order.by = dates)
#Merge FRED data
merged_data <- merge(merged_data, Debt_Risk_Spread)
} #end conditional for FRED_covariates
market_data_list[[i]] <- merged_data
}
##################################
#now build Y
Y <- list()
for (i in 1:length(start_dates)){
Y_i <- market_data_list[[i]][,1]
Y_i_drop_NA <- Y_i[complete.cases(Y_i)]
print('Here is the shock date')
print(shock_dates_as_dates[i])
if (shock_dates[i] %in% index(Y_i_drop_NA)){
print('The shock date is in the series.')
}
else{
print(paste('Shock date ', i, ' NOT in series ',i,".", sep = ''))
}
Y[[i]] <- Y_i_drop_NA
} #end for loop for building Y
#Now build X
X <- list()
for (i in 1:length(start_dates)){
X[[i]] <- market_data_list[[i]][,-1]
}
n <- length(start_dates) - 1
time_date <- gsub(" ", "", format(Sys.time(), "%a%b%d%X%Y"), fixed = TRUE)
png_save_name <- paste("real_data_output_plots/savetime_"
,time_date
,'_'
,TSUS
,'_'
,paste(log_ret_covariates,collapse='-')
,'_'
,paste(level_covariates,collapse='-')
,'_'
# ,paste(volume_covariates,collapse='-')
# ,'_'
# ,paste(data_absolute_return_covariates,collapse='-')
# ,'_'
,paste(shock_dates,collapse='-')
,".png"
,sep="")
png(png_save_name,width = 800, height = 600)
#Now run the algorithm
temp <- SynthVolForecast(Y
,X
,shock_time_vec = unlist(shock_dates)
,rep(k, n+1)
,dbw_scale = TRUE
,dbw_center = TRUE
,dbw_indices = NULL
#,covariate_indices = length(X)
,garch_order = c(1,1,0)
,plots = TRUE
,shock_time_labels = names(shock_dates)
,ground_truth_vec = ground_truth
,Y_lookback_indices = list(seq(1,30,1))
,X_lookback_indices = rep(list(c(1)),ncol(X[[1]]))
)
dev.off()
apply(lj, 2, num_unique)
mer <- read_excel("~/Desktop/Stripe/dstakehome_merchants.xlsx")
pay <- read_excel("~/Desktop/Stripe/dstakehome_payments.xlsx")
head(mer)
head(pay)
library(readxl)
library(dplyr)
library(caret)
library(GGally)
library(readxl)
library(dplyr)
library(caret)
library(GGally)
