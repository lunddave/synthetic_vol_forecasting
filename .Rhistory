if (plots == TRUE){
cat('User has opted to produce plots.','\n')
plot_maker_synthprediction(Y_series_list
,shock_time_vec
,integer_shock_time_vec
,shock_length_vec
,unadjusted_pred$pred
,w_hat
,omega_star_hat
,omega_star_hat_vec
,adjusted_pred
,display_ground_truth = display_ground_truth_choice
)
}
return(output_list)
} ### END SynthPrediction
### START SynthVolForecast
SynthVolForecast <- function(Y_series_list
,covariates_series_list
,shock_time_vec
,shock_length_vec
,k=1
,dbw_scale = TRUE
,dbw_center = TRUE
,dbw_indices = NULL
,dbw_Y_lookback = c(0)
,dbw_princ_comp_input = NULL
,covariate_indices = NULL
,geometric_sets = NULL #tk
,days_before_shocktime_vec = NULL #tk I may want to remove this
,garch_order = NULL
,common_series_assumption = FALSE
,plots = TRUE
,shock_time_labels = NULL
,ground_truth_vec = NULL
,Y_lookback_indices_input = list(seq(1,30,1))
,X_lookback_indices_input = rep(list(c(1)),length(dbw_indices))
){
### BEGIN Doc string
#tk
### END Doc string
### BEGIN Populate defaults
n <- length(Y_series_list) - 1
if (is.null(garch_order) == TRUE) {
garch_order <- list(length = n+1)
for (i in 1:(n+1)){garch_order[[i]] <- c(1,1,0)}
}
if (is.null(dbw_indices) == TRUE) {dbw_indices <- 1:ncol(covariates_series_list[[1]])}
### END Populate defaults
## BEGIN Check that inputs are all comformable/acceptable
n <- length(Y_series_list) - 1 #tk
## END Check that inputs are all comformable/acceptable
integer_shock_time_vec <- c() #mk
integer_shock_time_vec_for_convex_hull_based_optimization <- c() #mk
## BEGIN Check whether shock_time_vec is int/date
for (i in 1:(n+1)){
if (is.character(shock_time_vec[i]) == TRUE){
integer_shock_time_vec[i] <- which(index(Y[[i]]) == shock_time_vec[i]) #mk
integer_shock_time_vec_for_convex_hull_based_optimization[i] <- which(index(covariates_series_list[[i]]) == shock_time_vec[i]) #mk
}
else{
integer_shock_time_vec[i] <- shock_time_vec[i]
integer_shock_time_vec_for_convex_hull_based_optimization[i] <- shock_time_vec[i]
}
}
## END Check whether shock_time_vec is int/date
## BEGIN calculate weight vector
dbw_output <- dbw(covariates_series_list, #tk
dbw_indices,
integer_shock_time_vec_for_convex_hull_based_optimization,
scale = dbw_scale,
center = dbw_center,
sum_to_1 = TRUE, #tk
princ_comp_count = dbw_princ_comp_input,
bounded_below_by = 0, #tk
bounded_above_by = 1, #tk
# normchoice = normchoice, #tk
# penalty_normchoice = penalty_normchoice,
# penalty_lambda = penalty_lambda
Y = Y_series_list,
Y_lookback_indices = Y_lookback_indices_input,
X_lookback_indices = X_lookback_indices_input,
inputted_transformation = mean_square_y
)
w_hat <- dbw_output[[1]]
## END calculate weight vector
## BEGIN estimate fixed effects in donors
omega_star_hat_vec <- c()
omega_star_std_err_hat_vec <- c()
#tk
if (common_series_assumption == TRUE){
print('tk TODO')
#step 1: create dummy vector with n+1 shocks
#NOTA BENE: n different fixed effects, or
# 1 fixed effect estimated at n shocks?
vec_of_zeros <- rep(0, integer_shock_time_vec[i])
vec_of_ones <- rep(1, shock_length_vec[i])
vec_of_final_zeros <- rep(0, 20) #tk
post_shock_indicator <- c(vec_of_zeros, vec_of_ones)
last_shock_point <- integer_shock_time_vec[i] + shock_length_vec[i] + 20 #tk
#step 2: fit model
}
else{
for (i in 2:(n+1)){
# Make indicator variable w/ a 1 at only T*+1, T*+2,...,T*+shock_length_vec[i]
vec_of_zeros <- rep(0, integer_shock_time_vec[i])
vec_of_ones <- rep(1, shock_length_vec[i])
vec_of_final_zeros <- rep(0, 20)
post_shock_indicator <- c(vec_of_zeros, vec_of_ones, vec_of_final_zeros)
last_shock_point <- integer_shock_time_vec[i] + shock_length_vec[i] + 20 #tk
#subset X_i
if (is.null(covariate_indices) == TRUE) {
X_i_penultimate <- cbind(Y_series_list[[i]][1:last_shock_point] #tk
, post_shock_indicator)
X_i_final <- X_i_penultimate[,2]
}
else {
X_i_subset <- covariates_series_list[[i]][1:last_shock_point,covariate_indices]
X_i_with_indicator <- cbind(X_i_subset, post_shock_indicator)
X_i_final <- X_i_with_indicator
}
print('We print the tail of the covariate df we use in GARCH model:')
print(tail(X_i_final))
fitted_garch <- garchx::garchx(Y_series_list[[i]][1:last_shock_point] #tk
, order = garch_order[[i]]
, xreg = X_i_final
, backcast.values = NULL
, control = list(eval.max = 100000
, iter.max = 1500000
, rel.tol = 1e-8))
cat('\n===============================================================\n')
print(paste('Outputting GARCH estimates for donor series number ', i,'.', sep = ''))
print(fitted_garch)
print(paste('Outputting AIC for donor series number ', i,'.', sep = ''))
print(AIC(fitted_garch))
cat('\n===============================================================\n')
coef_test <- lmtest::coeftest(fitted_garch)
extracted_fixed_effect <- coef_test[dim(lmtest::coeftest(fitted_garch))[1], 1]
extracted_fixed_effect_std_err <- coef_test[dim(lmtest::coeftest(fitted_garch))[1], 2]
omega_star_hat_vec <- c(omega_star_hat_vec, extracted_fixed_effect)
omega_star_std_err_hat_vec <- c(omega_star_std_err_hat_vec, extracted_fixed_effect_std_err)
} ## END loop for computing fixed effects
}
## END estimate fixed effects in donors
## BEGIN compute linear combination of fixed effects
omega_star_hat <- w_hat %*% omega_star_hat_vec
## END compute linear combination of fixed effects
## BEGIN fit GARCH to target series
if (is.null(covariate_indices) == TRUE){
fitted_garch <- garchx::garchx(Y_series_list[[1]][1:(integer_shock_time_vec[1])]
, order = garch_order[[1]]
, xreg = NULL
, backcast.values = NULL
, control = list(eval.max = 100000
, iter.max = 1500000
, rel.tol = 1e-8))
cat('\n===============================================================\n')
print('Outputting the fitted GARCH for time series under study.')
print(fitted_garch)
print('Outputting AIC for time series under study.')
print(AIC(fitted_garch))
cat('\n===============================================================\n')
unadjusted_pred <- predict(fitted_garch, n.ahead = shock_length_vec[1])
}
else{
## BEGIN fit GARCH to target series
fitted_garch <- garchx::garchx(Y_series_list[[1]][1:(integer_shock_time_vec[1])]
, order = garch_order
, xreg = covariates_series_list[[1]][1:(integer_shock_time_vec[1]),covariate_indices]
, backcast.values = NULL
, control = list(eval.max = 100000
, iter.max = 1500000
, rel.tol = 1e-8))
cat('\n===============================================================\n')
print('Outputting the fitted GARCH for the time series under study.')
print(fitted_garch)
cat('\n===============================================================\n')
#Note: for forecasting, we use last-observed X value
X_to_use_in_forecast <- covariates_series_list[[1]][integer_shock_time_vec[1],covariate_indices]
X_replicated_for_forecast_length <- matrix(rep(X_to_use_in_forecast, k)
, nrow = shock_length_vec[1]
, byrow = TRUE)
forecast_period <- (integer_shock_time_vec[1]):(integer_shock_time_vec[1]+shock_length_vec[1])
mat_X_for_forecast <- cbind(Y_series_list[[1]][forecast_period]
, X_replicated_for_forecast_length)
unadjusted_pred <- predict(fitted_garch
, n.ahead = shock_length_vec[1]
, newxreg = mat_X_for_forecast[,-1])
}
print('Now we get the adjusted predictions.')
adjusted_pred <- unadjusted_pred + rep(omega_star_hat, k)
arithmetic_mean_based_pred <- rep(mean(omega_star_hat_vec), k) + unadjusted_pred
if (is.null(ground_truth_vec) == TRUE){
QL_loss_unadjusted_pred <- NA
QL_loss_adjusted_pred <- NA
}
else {
QL_loss_unadjusted_pred <- sum(QL_loss_function(unadjusted_pred
, ground_truth_vec))
QL_loss_adjusted_pred <- sum(QL_loss_function(adjusted_pred
, ground_truth_vec))
QL_loss_arithmetic_mean_based_pred <- sum(QL_loss_function(arithmetic_mean_based_pred
, ground_truth_vec))
}
list_of_linear_combinations <- list(w_hat)
list_of_forecasts <- list(unadjusted_pred
, adjusted_pred
, arithmetic_mean_based_pred)
list_of_losses <- list(QL_loss_unadjusted_pred
, QL_loss_adjusted_pred
, QL_loss_arithmetic_mean_based_pred)
names(list_of_forecasts) <- c('unadjusted_pred'
, 'adjusted_pred'
, 'arithmetic_mean_based_pred')
names(list_of_losses) <- c('unadjusted_pred'
, 'adjusted_pred'
, 'arithmetic_mean_based_pred')
output_list <- list(list_of_linear_combinations
, list_of_forecasts
, list_of_losses)
names(output_list) <- c('linear_combinations'
, 'predictions'
, 'loss')
## tk OUTPUT
cat('--------------------------------------------------------------\n',
'-------------------SynthVolForecast Results-------------------','\n',
'--------------------------------------------------------------\n',
'Donors:', n, '\n',  '\n',
'Shock times:', shock_time_vec, '\n', '\n',
'Lengths of shock times:', shock_length_vec, '\n', '\n',
'Optimization Success:', dbw_output[[2]], '\n', '\n',
'Convex combination:',w_hat,'\n', '\n',
'Shock estimates:', omega_star_hat_vec, '\n', '\n',
'Aggregate estimated shock effect:', omega_star_hat, '\n', '\n',
'Unadjusted Forecast:', unadjusted_pred,'\n', '\n',
'Adjusted Forecast:', adjusted_pred,'\n', '\n',
'Arithmetic-Mean-Based Forecast:',arithmetic_mean_based_pred,'\n','\n',
'Ground Truth (estimated by realized volatility):', ground_truth_vec,'\n', '\n',
'QL Loss of unadjusted:', QL_loss_unadjusted_pred,'\n', '\n',
'QL Loss of adjusted:', QL_loss_adjusted_pred,'\n', '\n'
)
## PLOTS
if (plots == TRUE){
cat('\n User has opted to produce plots.','\n')
plot_maker_garch(fitted(fitted_garch)
,shock_time_labels
,integer_shock_time_vec
,shock_length_vec
,unadjusted_pred
,w_hat
,omega_star_hat
,omega_star_hat_vec
#,omega_star_std_err_hat_vec
,adjusted_pred
,arithmetic_mean_based_pred
,ground_truth_vec)
}
return(output_list)
} ### END SynthVolForecast
### START HAR
HAR <- function(Y
,covariates_series_list
,shock_time_vec
,shock_length_vec
,k=1 #does it make sense for a k-step ahead?
,dbw_scale = TRUE
,dbw_center = TRUE
,dbw_indices = 1:ncol(covariates_series_list[[1]])
,dbw_Y_lookback = c(0)
,dbw_princ_comp_input = NULL
,covariate_indices = NULL
,geometric_sets = NULL #tk
,plots = TRUE
,shock_time_labels = NULL
,ground_truth_vec = NULL
,Y_lookback_indices_input = list(seq(1,3,1))
,X_lookback_indices_input = rep(list(c(1)),length(dbw_indices))
){
### BEGIN Doc string
# Input:
#   Y_series_list - a list of df, where in each df, realized measure is first col
# ,covariates_series_list
# ,shock_time_vec
# ,shock_length_vec
# ,k=1
# ,dbw_scale = TRUE
# ,dbw_center = TRUE
# ,dbw_indices = NULL
# ,dbw_Y_lookback = c(0)
# ,dbw_princ_comp_input = NULL
# ,covariate_indices = NULL
# ,geometric_sets = NULL #tk
# ,days_before_shocktime_vec = NULL #tk I may want to remove this
# ,garch_order = NULL
# ,plots = TRUE
# ,shock_time_labels = NULL
# ,ground_truth_vec = NULL
# ,Y_lookback_indices_input = list(seq(1,3,1))
# ,X_lookback_indices_input = rep(list(c(1)),length(dbw_indices))
### END Doc string
#Big thing to consider: what needs to change when Y is a just a df?
n <- length(X) - 1 #tk
integer_shock_time_vec <- c() #mk
integer_shock_time_vec_for_convex_hull_based_optimization <- c() #mk
omega_star_hat_vec <- c()
if (is.data.frame(Y) == TRUE){
print('Y is a dataframe')
## BEGIN Check whether shock_time_vec is int/date
for (i in 1:length(shock_time_vec)){
print(paste('The ', i, 'th shock time is ', shock_time_vec[i], sep = ''))
if (is.character(shock_time_vec[i]) == TRUE){
integer_shock_time_vec[i] <- which(row.names(Y) == shock_time_vec[i]) #mk
integer_shock_time_vec_for_convex_hull_based_optimization[i] <- which(index(covariates_series_list[[i]]) == shock_time_vec[i]) #mk
}
else{
integer_shock_time_vec[i] <- shock_time_vec[i]
integer_shock_time_vec_for_convex_hull_based_optimization[i] <- shock_time_vec[i]
}
}
## END Check whether shock_time_vec is int/date
shock_dates_as_dates <- as.Date(as.Date(unlist(shock_dates)))
shock_dates_as_dates_without_TSUS <- shock_dates_as_dates[-1]
Y_with_donor_col <- data.frame(Y %>% mutate(donor = ifelse(row.names(RVSPY_final) %in% shock_dates_as_dates_without_TSUS,1,0)))
print('Here are the rows with 1 in the indicator variable:')
print(Y_with_donor_col[Y_with_donor_col$donor == 1,])
Y_with_donor_col[Y_with_donor_col$donor == 1, "donor"] <- shock_dates_as_dates_without_TSUS
Y_with_donor_col$donor = as.factor(Y_with_donor_col$donor)
training_period <- Y_with_donor_col[row.names(Y_with_donor_col) <= as.Date(shock_dates_as_dates[1]) , ] #tk
print('We inspect the last few rows of the training period:')
print(tail(training_period))
m1 <- lm(training_period[,1] ~. , data = training_period[,-c(1)])
cat('We inspect the fitted linear model.')
print(summary(m1))
forecast_period <- Y_with_donor_col[row.names(Y_with_donor_col) == as.Date(shock_dates_as_dates[1]), ] #tk
outcome <- forecast_period[,1]
print('Inspect the forecast period:')
print(head(forecast_period))
forecast_period_w_outcome_dropped <- forecast_period[,-c(1)] #drop the outcome var
print('Make the donor variable a factor:')
forecast_period_w_outcome_dropped$donor <- as.factor(forecast_period_w_outcome_dropped$donor)
unadjusted_pred <- predict(m1, newdata = forecast_period_w_outcome_dropped)
no_events <- length(shock_dates_as_dates) - 1
no_coef <- length(coef(m1))
omega_star_hat_vec <- c(omega_star_hat_vec, coef(m1)[(no_coef-no_events+1):no_coef])
}
else{
print('Y is not a dataframe.')
for (i in 1:length(shock_time_vec)){
print(paste('The ', i, 'th shock time is ', shock_time_vec[i], sep = ''))
if (is.character(shock_time_vec[i]) == TRUE){
integer_shock_time_vec[i] <- which(row.names(Y) == shock_time_vec[i]) #mk
integer_shock_time_vec_for_convex_hull_based_optimization[i] <- which(index(covariates_series_list[[i]]) == shock_time_vec[i]) #mk
}
else{
integer_shock_time_vec[i] <- shock_time_vec[i]
integer_shock_time_vec_for_convex_hull_based_optimization[i] <- shock_time_vec[i]
}
} #end loop
for (i in 2:(n+1)){
# Make indicator variable w/ a 1 at only T*+1, T*+2,...,T*+shock_length_vec[i]
vec_of_zeros <- rep(0, integer_shock_time_vec[i])
vec_of_ones <- rep(1, shock_length_vec[i])
post_shock_indicator <- c(vec_of_zeros, vec_of_ones)
last_shock_point <- integer_shock_time_vec[i] + shock_length_vec[i]
#subset X_i
if (is.null(covariate_indices) == TRUE) {
X_i_penultimate <- cbind(Y[[i]][1:last_shock_point] #tk
, post_shock_indicator)
X_i_final <- X_i_penultimate[,2]
}
else {
X_i_subset <- covariates_series_list[[i]][1:last_shock_point,covariate_indices]
X_i_with_indicator <- cbind(X_i_subset, post_shock_indicator)
X_i_final <- X_i_with_indicator
}
print('We print the tail of the covariate df we use in the model:')
print(tail(X_i_final))
omega_star_hat_vec <- c(omega_star_hat_vec, HAR_lm)
} #end loop?
}
print('We print the integers of the shock times.')
print(integer_shock_time_vec)
print('We print the booleans for the shock times.')
print(integer_shock_time_vec_for_convex_hull_based_optimization) #tk seems wrong
print('Here is the Y data we will use in dbw:')
make_xts <- xts(Y[,1], order.by = as.Date(row.names(Y))) #tk
colnames(make_xts) <- c('User_chosen_Y')
Y_list <- rep(list(make_xts), n+1) #tk as.Date here is inelegant
## BEGIN calculate weight vector
dbw_output <- dbw(covariates_series_list, #tk
dbw_indices,
integer_shock_time_vec_for_convex_hull_based_optimization,
scale = dbw_scale,
center = dbw_center,
sum_to_1 = TRUE, #tk
princ_comp_count = dbw_princ_comp_input,
bounded_below_by = 0, #tk
bounded_above_by = 1, #tk
# normchoice = normchoice, #tk
# penalty_normchoice = penalty_normchoice,
# penalty_lambda = penalty_lambda
Y = Y_list,
Y_lookback_indices = Y_lookback_indices_input,
X_lookback_indices = X_lookback_indices_input,
inputted_transformation = id
)
## END calculate weight vector
## BEGIN compute linear combination of fixed effects
w_hat <- dbw_output[[1]]
omega_star_hat <- w_hat %*% omega_star_hat_vec
## END compute linear combination of fixed effects
## Forecasts and loss
arithmetic_mean_based_pred <- mean(omega_star_hat_vec) + unadjusted_pred
adjusted_pred <- unadjusted_pred + omega_star_hat
if (min(Y[[1]]) < 0){
QL_loss_arithmetic_mean <- QL_loss_function(exp(arithmetic_mean_based_pred), exp(outcome))
QL_loss_adjusted <- QL_loss_function(exp(adjusted_pred), exp(outcome)) #tk
QL_loss_unadjusted <- QL_loss_function(exp(unadjusted_pred), exp(outcome)) #tk
}
else{
QL_loss_arithmetic_mean <- QL_loss_function(arithmetic_mean_based_pred, outcome)
QL_loss_adjusted <- QL_loss_function(adjusted_pred, outcome) #tk
QL_loss_unadjusted <- QL_loss_function(unadjusted_pred, outcome) #tk
}
list_of_linear_combinations <- list(w_hat)
list_of_forecasts <- list(unadjusted_pred
, adjusted_pred
, arithmetic_mean_based_pred)
list_of_losses <- list(QL_loss_unadjusted
, QL_loss_adjusted
, QL_loss_arithmetic_mean)
names(list_of_forecasts) <- c('unadjusted_pred'
, 'adjusted_pred'
, 'arithmetic_mean_based_pred')
output_list <- list(list_of_linear_combinations
, list_of_forecasts
, list_of_losses)
names(output_list) <- c('linear_combinations', 'predictions', 'loss')
## tk OUTPUT
cat('--------------------------------------------------------------\n',
'-------------------HAR Results-------------------','\n',
'--------------------------------------------------------------\n',
'Donors:', n, '\n',  '\n',
'Shock times:', shock_time_vec, '\n', '\n',
'Lengths of shock times:', '#tk FIX', '\n', '\n',
'Optimization Success:', dbw_output[[2]], '\n', '\n',
'Convex combination:',w_hat,'\n', '\n',
'Shock estimates:', omega_star_hat_vec, '\n', '\n',
'Aggregate estimated shock effect:', omega_star_hat, '\n', '\n',
'Unadjusted Forecast:', unadjusted_pred,'\n', '\n',
'Adjusted Forecast:', adjusted_pred,'\n', '\n',
'Arithmetic-Mean-Based Forecast:',arithmetic_mean_based_pred,'\n','\n',
'Ground Truth (estimated by realized volatility):', outcome,'\n', '\n',
'QL Loss of Arithmetic Mean', QL_loss_arithmetic_mean, '\n', '\n',
'QL Loss of unadjusted:', QL_loss_unadjusted,'\n', '\n',
'QL Loss of adjusted:', QL_loss_adjusted,'\n', '\n'
)
## PLOTS
#tk make plot_maker_HAR
if (plots == TRUE){
cat('\n User has opted to produce plots.','\n')
plot_maker_HAR(Y_list
,shock_time_labels = shock_time_labels
,shock_time_vec = integer_shock_time_vec
,shock_length_vec = rep(1, n+1) #tk
,unadjusted_pred
,w_hat
,omega_star_hat
,omega_star_hat_vec
#,omega_star_hat_vec_std_err
,adjusted_pred
,display_ground_truth = TRUE) #tk what is this set to true?
}
return(output_list)
} ### END HAR
#Now run the algorithm
output <- HAR(RVSPY_final
,X
,shock_time_vec = unlist(shock_dates)
,shock_length_vec
,k=1 #does it make sense for a k-step ahead?
,dbw_scale = TRUE
,dbw_center = TRUE
,dbw_indices = 1:ncol(X[[1]])
,dbw_Y_lookback = c(0)
,dbw_princ_comp_input = NULL
,covariate_indices = NULL
,geometric_sets = NULL #tk
,plots = TRUE #tk
,shock_time_labels = names(shock_dates)
,ground_truth_vec = NULL
,Y_lookback_indices_input = list(seq(1,15,1))
,X_lookback_indices_input = rep(list(c(10)),length(1:ncol(X[[1]])))
)
output <- HAR(RVSPY_final
,X
,shock_time_vec = unlist(shock_dates)
,shock_length_vec
,k=1 #does it make sense for a k-step ahead?
,dbw_scale = TRUE
,dbw_center = TRUE
,dbw_indices = 1:ncol(X[[1]])
,dbw_Y_lookback = c(0)
,dbw_princ_comp_input = NULL
,covariate_indices = NULL
,geometric_sets = NULL #tk
,plots = TRUE #tk
,shock_time_labels = names(shock_dates)
,ground_truth_vec = NULL
,Y_lookback_indices_input = list(seq(1,15,1))
,X_lookback_indices_input = rep(list(c(10)),length(1:ncol(X[[1]])))
)
